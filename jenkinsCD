pipeline {
    agent any

    tools {
        nodejs 'nodejs'
    }

    environment {
        TF_VAR_create_deploy_server = 'true'
        APP_NAME = "designflow-app-pipeline"
        RELEASE = "1.0.0"
        DOCKER_USER = "pramithamj"
        DOCKER_CREDENTIALS_ID = 'dockerhub' // Docker credentials ID in Jenkins
        IMAGE_NAME = "${DOCKER_USER}/${APP_NAME}"
        IMAGE_TAG = "${RELEASE}-${BUILD_NUMBER}"
        DOCKER_USERNAME = "thetharz"
        CLIENT_PORT=3000
        SERVER_PORT=5000
    }

    stages {
        stage('Checkout') {
            steps {
                git branch: 'main', url: 'https://github.com/PramithaMJ/Manifest'
            }
        }

        stage('Log AWS Credentials') {
            steps {
                script {
                    withCredentials([usernamePassword(credentialsId: 'IAM', usernameVariable: 'AWS_ACCESS_KEY_ID', passwordVariable: 'AWS_SECRET_ACCESS_KEY')]) {
                        echo "AWS_ACCESS_KEY_ID: ${env.AWS_ACCESS_KEY_ID}"
                        echo "AWS_SECRET_ACCESS_KEY: ${env.AWS_SECRET_ACCESS_KEY}"
                    }
                }
            }
        }

        stage('Terraform Init') {
            steps {
                withCredentials([usernamePassword(credentialsId: 'IAM', usernameVariable: 'AWS_ACCESS_KEY_ID', passwordVariable: 'AWS_SECRET_ACCESS_KEY')]) {
                    sh 'terraform init'
                }
            }
        }

        stage('Terraform Plan') {
            steps {
                withCredentials([usernamePassword(credentialsId: 'IAM', usernameVariable: 'AWS_ACCESS_KEY_ID', passwordVariable: 'AWS_SECRET_ACCESS_KEY')]) {
                    sh 'terraform plan'
                }
            }
        }

        stage('Terraform Apply') {
            steps {
                withCredentials([usernamePassword(credentialsId: 'IAM', usernameVariable: 'AWS_ACCESS_KEY_ID', passwordVariable: 'AWS_SECRET_ACCESS_KEY')]) {
                    sh 'terraform apply -auto-approve'
                }
            }
        }

        stage('Wait for EC2 instance to boot') {
            steps {
                script {
                    def instanceIp = sh(script: 'terraform output -raw instance_ip', returnStdout: true).trim()
                    if (instanceIp) {
                        timeout(time: 5, unit: 'MINUTES') {
                            waitUntil {
                                return sh(script: "ping -c 1 -w 1 ${instanceIp}", returnStatus: true) == 0
                            }
                        }
                        echo "Instance IP found: ${instanceIp}"
                    } else {
                        error "No instance IP found."
                    }
                }
            }
        }

        stage('Ansible Playbook') {
            steps {
                script{
                // script {
                //     def instanceIp = sh(script: 'terraform output -raw instance_ip', returnStdout: true).trim()
                //     if (instanceIp) {
                //         writeFile file: 'inventory', text: "[deploy_server]\n${instanceIp} ansible_ssh_private_key_file=~/.ssh/JenkinsServerPFT.pem ansible_user=ubuntu"
                //         sh 'ansible-playbook -i inventory playbook.yml'
                //     } else {
                //         echo "No instance created, skipping Ansible playbook execution."
                //     }
                //  }
                withCredentials([usernamePassword(credentialsId: 'dockerhub-credentials', usernameVariable: 'docker_user', passwordVariable: 'docker_pass')]) {
                        sh "docker login -u '${docker_user}' -p '${docker_pass}'"
                
                        //sh 'docker run -d -p 5000:5000 thethetharz/designflow-ci-server:venv.BUILD_NUMBER'
                      //  sh 'docker run -d -p 3000:3000 thethetharz/designflow-ci-client:venv.BUILD_NUMBER'

                        sh "docker run -d -p ${CLIENT_PORT}:5000 --name designflow-client-${BUILD_NUMBER} ${DOCKER_USERNAME}/designflow-ci-client:v${BUILD_NUMBER}"

                    // Running the server Docker container
                    sh "docker run -d -p ${SERVER_PORT}:5000 --name designflow-server-${BUILD_NUMBER} ${DOCKER_USERNAME}/designflow-ci-server:v${BUILD_NUMBER}"
                 }
                }
            }
        }

    }

    post {
        success {
            echo 'Pipeline completed successfully!'
        }
        failure {
            echo 'Pipeline failed.'
        }
    }
}